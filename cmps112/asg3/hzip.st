"Start Code from example"

Object subclass: Leaf [
   |char count|
   char [ ^ char ]
   count [ ^ count ]

   Leaf class >> new [
      self shouldNotImplement
   ]

   Leaf class >> new: aChar count: aCount [
      |result|
      result := super new.
      result setChar: aChar andCount: aCount.
      ^result
   ]

   setChar: aChar andCount: aCount [
      char := aChar.
      count := aCount.
   ]

   <= other [
      ^ (count < other count)
      | ((count = other count) & (char <= other char))
   ]

   printBase: aStream [
      ^ aStream << self class << '(' << char << ',' << count.
   ]

   printOn: aStream [
      (self printBase: aStream) << ')'.
   ]

   inorder: visitor prefix: string [
      visitor value: char value: string.
   ]

]

Leaf subclass: Tree [
   |left right|

   Tree class >> new: aChar count: aCount [
      self shouldNotImplement
   ]

   Tree class >> new: aChar count: aCount left: aLeft right: aRight [
      |result|
      result := super new: aChar count: aCount.
      result setLeft: aLeft andRight: aRight.
      ^ result.
   ]

   setLeft: aLeft andRight: aRight [
      left := aLeft.
      right := aRight.
   ]

   printOn: aStream [
      (self printBase: aStream) << ',' << left << ',' << right << ')'.
   ]

   inorder: visitor prefix: string [
      left inorder: visitor prefix: string, '0'.
      right inorder: visitor prefix: string, '1'.
   ]
]

Object subclass: Person [
    |name age gender|

    Person class >> testStatic [
        stdout << 'static test!' << Character nl.
    ]

    Person class >> new: aname age: aage [
        | built |
        built := super new.
        built init: aname age: aage.
        ^ built.
    ]

    init: aname age: aage [
        age = aage.
        name = aname.
    ]

    setName: aname [
        name := aname.
    ]

    name [
        ^name.
    ]
]

|d count value|
d := Dictionary new.
count := Integer 1.
value := Character nl.
stdout << d count << Integer count.


person := Person new: 'Wenqiao' age: 21.
Person testStatic.
stdout << person name << Character nl.
person setName: 'jiong'.
stdout << person name << Character nl.  

